// forms.js or your main script file

import formLogic from './form-logic.js';

(function(global) {
    const LiveBlade = {};


    /**
     * Core function to load content via AJAX and inject into a target element.
     * Supports reusability in deleting items.
     * 
     * @param {String} deleteUrl - The Laravel route name/link.
     */
    LiveBlade.deleteItemInLoop = function(deleteUrl) {
        return  formLogic.loopDeleteForms(deleteUrl)
    };


    /**
     * Core function to load content via AJAX and inject into a target element.
     * Supports reusability in updating items.
     * 
     * @param {String} updateUrl - The Laravel route name/link.
     * @param {Object} data - data to be removed from DOM  (optional).
     */
    LiveBlade.editLoopForms = function(data = {}, updateUrl) {
        return  formLogic.loopUpdateForms(data, updateUrl)
    };


    /**
     * Core function to load content via AJAX and inject into a target element.
     * Supports reusability in searching items.
     * 
     * @param {String} inputId - Input value from .
     * @param {String} tableId - component to refresh.
     */
    LiveBlade.searchTableItems = function(inputId, tableId) {
        formLogic.beginTableSearch(inputId, tableId)
    };

    /**
     * Core function to load content via AJAX and inject into a target element.
     * Supports reusability in searching items.
     * 
     * @param {String} inputId - Input value from .
     * @param {String} tableId - component to refresh.
     */
    LiveBlade.uploadImage = function(file, uploadRoute, fileInputName) {
        formLogic.beginUploadImage(file, uploadRoute, fileInputName)
    };



    /**
     * Core function to load content via AJAX and inject into a target element.
     * Supports reusability in updating status of items.
     * 
     * @param {String} updateUrl - The Laravel route name/link.
     */
    LiveBlade.loopUpdateStatus = function(updateUrl, selectedStatus) {
        formLogic.loopUpdateStatusForms(updateUrl, selectedStatus)
    };


    /**
     * Core function to load content via AJAX and inject into a target element.
     * Supports reusability in updating items.
     * 
     * @param {Object} data - data to be removed from DOM 
     */
    LiveBlade.submitFormItems = function(data = {}) {
        return  formLogic.submitFormEntities(data)
    };
    
    
    
    /**
     * Toggles the loading state of a button, showing or hiding loading indicators.
     * This function is designed for reusability across multiple buttons in the UI.
     * 
     * When in the loading state, the button is disabled, the main label is hidden,
     * and a loading spinner or progress indicator is displayed.
     * 
     * @param {HTMLElement} button - The button element to toggle.
     * @param {boolean} isLoading - If true, shows loading state; if false, reverts to default state.
     */
    LiveBlade.toggleButtonLoading = (button, isLoading) => {
        if (!(button instanceof HTMLElement)) {
            console.error('Invalid button element provided.');
            return;
        }

        if (isLoading) {
            button.setAttribute('disabled', 'true'); // Disable the button to prevent multiple clicks
            button.querySelector('.indicator-label').style.display = 'none'; // Hide the main label
            button.querySelector('.indicator-progress').style.display = 'inline'; // Show the loading indicator
        } else {
            button.removeAttribute('disabled'); // Re-enable the button
            button.querySelector('.indicator-label').style.display = 'inline'; // Show the main label
            button.querySelector('.indicator-progress').style.display = 'none'; // Hide the loading indicator
        }
    };


    /**
         * Core function to load content via AJAX and inject into a target element.
         * Supports reusability in searching items.
         * 
         * @param {String} inputId - Input value from .
         * @param {String} tableId 
         */
    LiveBlade.searchCardItems = function(inputId, cardSelector, attributeName, titleSelector) {
        formLogic.beginCardSearch(inputId, cardSelector, attributeName, titleSelector)
    };
    
    /**
    * Core function to load content via AJAX and inject into a target element.
    * Supports reusability in filtering items.
    * 
    * @param {String} filterSelector - Input value from .
    * @param {String} tableSelector - table to filter.
    * @param {String} attribute - attribute to filter.
    */
    LiveBlade.setupTableFilter = function(filterSelector, tableSelector, attribute) {
        formLogic.beginTableFilter(filterSelector, tableSelector, attribute);
    };
    



    // Expose LiveBlade to the global scope
    global.LiveBlade = LiveBlade;
})(window);
